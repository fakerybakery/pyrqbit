name: Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

jobs:
  test:
    name: Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.10', '3.11', '3.12']

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Install maturin
      run: pip install maturin

    - name: Create virtual environment
      run: python -m venv .venv

    - name: Activate venv and build (Linux/macOS)
      if: runner.os != 'Windows'
      run: |
        source .venv/bin/activate
        maturin develop --release

    - name: Activate venv and build (Windows)
      if: runner.os == 'Windows'
      run: |
        .venv\Scripts\activate
        maturin develop --release

    - name: Test import (Linux/macOS)
      if: runner.os != 'Windows'
      run: |
        source .venv/bin/activate
        python -c "import pyrqbit; print('Import successful')"
        python -c "from pyrqbit import TorrentClient; print('High-level API works')"

    - name: Test import (Windows)
      if: runner.os == 'Windows'
      run: |
        .venv\Scripts\activate
        python -c "import pyrqbit; print('Import successful')"
        python -c "from pyrqbit import TorrentClient; print('High-level API works')"

  build-wheels:
    name: Build wheels on ${{ matrix.platform.os }}
    runs-on: ${{ matrix.platform.os }}
    strategy:
      fail-fast: false
      matrix:
        platform:
          - os: ubuntu-latest
            target: x86_64
          - os: ubuntu-latest
            target: aarch64
          - os: macos-latest
            target: x86_64
          - os: macos-latest
            target: aarch64
          - os: windows-latest
            target: x86_64

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Set up QEMU (for ARM builds)
      if: matrix.platform.target == 'aarch64' && matrix.platform.os == 'ubuntu-latest'
      uses: docker/setup-qemu-action@v3

    - name: Build wheels
      uses: PyO3/maturin-action@v1
      with:
        target: ${{ matrix.platform.target }}
        command: build
        args: --release --out dist --interpreter 3.10 3.11 3.12

    - name: Upload wheels
      uses: actions/upload-artifact@v4
      with:
        name: wheels-${{ matrix.platform.os }}-${{ matrix.platform.target }}
        path: dist/*.whl
        retention-days: 7

  publish-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [test, build-wheels]
    if: github.event_name == 'release' && github.event.action == 'published'
    permissions:
      id-token: write  # For trusted publishing

    steps:
    - name: Download all wheels
      uses: actions/download-artifact@v4
      with:
        pattern: wheels-*
        path: dist
        merge-multiple: true

    - name: List wheels
      run: ls -R dist/

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        packages-dir: dist/
        skip-existing: true

  publish-github:
    name: Publish to GitHub Releases
    runs-on: ubuntu-latest
    needs: [build-wheels]
    if: github.event_name == 'release' && github.event.action == 'published'
    permissions:
      contents: write

    steps:
    - name: Download all wheels
      uses: actions/download-artifact@v4
      with:
        pattern: wheels-*
        path: dist
        merge-multiple: true

    - name: Upload to GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        files: dist/*.whl
